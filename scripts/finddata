#!/usr/bin/env python
from __future__ import (absolute_import, division, print_function, unicode_literals)

import logging
import os
import sys
try:
    from urllib import urlopen
except ImportError:
    from urllib.request import urlopen
import xml.dom.minidom
from finddata import __version__

# The endpoint for icat v4.
# List of restful web services available is at
# https://trac.sns.gov/adara/wiki/Post-Processing
BASE_URL = 'http://icat.sns.gov:2080/icat-rest-ws/'

# list of log levels
LOGLEVELS = ["DEBUG", "INFO", "WARNING"]

def parseInt(number):
    try:
        return int(number)
    except ValueError as e:
        logging.info("Invalid run numbers: %s" % str(e))

    return 0

def procNumbers(numbers):
    # simply see if it is an integer
    try:
        return [int(numbers)]
    except ValueError:
        pass

    # split on commas
    result = []
    for item in numbers.split(','):
        # if there is a dash then it is a range
        if "-" in item:
            item = [parseInt(i) for i in item.split("-")]
            item.sort()
            if item[0]:
                result.extend(range(item[0], item[1]+1))
        else:
            item = parseInt(item)
            if item:
                result.append(item)

    return result

def procLocations(locations):
    """
    Turn a list of xml nodes into a list of paths. This only returns
    paths for files that pass os.path.exists.

    @param locations The xml node that contains the locations
    @returns The list of files. The list is empty if none are found.
    """
    logging.debug("starting with %d locations" % len(locations))
    str_locs = []

    # convert nodes to strings
    for location in locations:
        for node in location.childNodes:
            if node.nodeType == node.TEXT_NODE:
                str_locs.append(str(node.data))
                break
    logging.debug("converted %d locations to strings" % len(str_locs))

    # see what is acually readible by the user
    result = []
    for location in str_locs:
        if os.path.exists(location):
            result.append(location)
    logging.debug("%d locations exist" % len(result))

    return result

def getXml(endpoint):
    url = BASE_URL + endpoint
    logging.info("trying " + url)

    # get the document
    handle = urlopen(url)
    doc =  handle.read().decode()
    logging.debug("DOC:" + doc)

    # parse the xml
    return xml.dom.minidom.parseString(doc)


def getInstruments(withLower=False):
    """
    Hit ICAT to find out the list of instruments at the facility.
    """
    doc = getXml('experiment/SNS')

    # convert to actual instruments
    instr_xml = doc.getElementsByTagName("instruments")[0]
    instr_str = []
    for instr in instr_xml.childNodes:
        for node in instr.childNodes:
            if node.nodeType == node.TEXT_NODE:
                instr_str.append(str(node.data))
                break
    logging.debug("converted %d locations to strings" % len(instr_str))

    if withLower:
        lower_instr = [instr.lower() for instr in instr_str]
        instr_str.extend(lower_instr)

    return instr_str

def getProposal(instr, run):
    """
    Get the proposal for a given run.
    """
    doc = getXml("dataset/SNS/" + instr + '/' + str(run) + "/metaOnly")

    xmlblob = doc.getElementsByTagName("proposal")[0]
    proposal = "Failed to find proposal"
    for node in xmlblob.childNodes:
        if node.nodeType == node.TEXT_NODE:
            proposal = str(node.data)
            break

    return proposal

def getRunsInProp(instr, proposal):
    doc = getXml("experiment/SNS/" + str(instr) + "/" + str(proposal))
    xmlblob = doc.getElementsByTagName("runRange")[0]
    runs = "Failed to find any runs for " + proposal
    for node in xmlblob.childNodes:
        if node.nodeType == node.TEXT_NODE:
            runs = str(node.data)
            runs = runs.replace(" ", "")
            break
    return runs

def getFileLoc(filename):
    """
    Ping ICAT for the locations that the file might be at and convert them
    into usable paths.

    @return The first path that works (as suggested by ICAT) or None.
    """
    doc = getXml('datafile/filename/' + filename)

    # convert to actual locations
    locations = doc.getElementsByTagName("locations")[0]
    locations = procLocations(locations.childNodes)

    logging.info("found locations[%d]: %s" % (len(locations), str(locations)))

    if len(locations) > 0: # always return the first one
        return locations[0]
    else:
        return None

def findfile(instr, run):
    """
    Find the specified run.
    """
    run = str(run) # should come in as an integer

    # try pre-ADARA name
    shortname = instr+"_"+run+"_event.nxs"
    filename = getFileLoc(shortname)
    if filename is None:
        logging.info("failed to find pre-ADARA file: " + shortname)
    else:
        return filename

    # try ADARA name
    shortname = instr+"_"+run+".nxs.h5"
    filename = getFileLoc(shortname)
    if filename is None:
        logging.info("failed to find ADARA file: " + shortname)
    else:
        return filename

    # give up
    raise RuntimeError("Failed to find data for %s %s" % (instr, run))

if __name__ == "__main__":
    # set up optparse
    import argparse     # for command line options
    import argcomplete  # for bash completion
    parser = argparse.ArgumentParser(description="Find data files using ICAT")

    parser.add_argument('inst', nargs='?', help='Specify the instrument name',
                        choices=getInstruments(withLower=True))
    parser.add_argument('runs', nargs='*',
                        help='Specify the run numbers')

    parser.add_argument("-l", "--loglevel", dest="loglevel", default="WARNING",
                        choices=LOGLEVELS,
                        help="Specify the log level")# (" \
                        #+ ", ".join(LOGLEVELS)+ ")")
    parser.add_argument("-v", "--version", dest="version", action="store_true",
                        help="Print the version information and exit")
    parser.add_argument("-f", "--filename", dest="filename",
                        help="look for a specific filename")
    parser.add_argument("--getproposal", dest="getproposal",
                        action="store_true",
                        help="Show the proposal for the run")
    parser.add_argument("--listruns", dest="listruns",
                        help="List all of the runs in a proposal")

    # set up bash completion
    argcomplete.autocomplete(parser)
    # parse the command line
    options = parser.parse_args()

    # setup logging
    options.loglevel = options.loglevel.upper()
    options.loglevel = getattr(logging, options.loglevel.upper(),
                               logging.WARNING)
    logging.basicConfig(format='%(levelname)s:%(message)s',
                        level=options.loglevel)

    # log the options and arguments
    logging.debug('options ' + str(options))

    # if they want the version just give it back and exit
    if options.version:
        print("finddata version " + __version__)
        sys.exit(0)

    # if the filename is specified just search and be done
    if options.filename:
        filename = getFileLoc(options.filename)
        if filename is not None:
            print(filename)
            sys.exit(0)
        else:
            print("Failed to find file", options.filename)
            sys.exit(1)

    # verify that both instrument and runnumber were supplied
    if options.inst is None:
        parser.error("Must supply instrument")
    options.inst = options.inst.upper()
    INSTR = getInstruments()
    if not options.inst in INSTR:
        parser.error("Unknown instrument '%s' %s" % (options.inst, str(INSTR)))
    runnumbers = []
    for arg in options.runs:
        runnumbers.extend(procNumbers(arg))

    if options.listruns:
        # is actual the proposal number
        print(getRunsInProp(options.inst, options.listruns))
        sys.exit(0)

    if len(runnumbers) <= 0:
        parser.error('Failed to specify any runs')

    # do the actual searching
    if options.getproposal:
        multiRun = (len(runnumbers) > 1)
        for run in runnumbers:
            result = getProposal(options.inst, run)
            if multiRun:
                print(run,)
            print(result)
    else:
        # get the file
        for run in runnumbers:
            try:
                print(findfile(options.inst, run))
            except RuntimeError as e:
                print(e)
